import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
from pycoingecko import CoinGeckoAPI

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

cg = CoinGeckoAPI()
admins = []  # Replace with the actual Telegram user IDs of the admins
blocked_users = set()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id in blocked_users:
        await update.message.reply_text("You are blocked from using this bot.")
        return
    await update.message.reply_text(f"Hello {user.first_name}, I'm a crypto price bot!")

async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id in blocked_users:
        await update.message.reply_text("You are blocked from using this bot.")
        return

    if context.args:
        ticker = context.args[0]
        price_info = cg.get_price(ids=ticker, vs_currencies='usd')
        if price_info:
            price = price_info.get(ticker, {}).get('usd')
            if price:
                keyboard = [[InlineKeyboardButton("Refresh", callback_data=f'price_{ticker}')]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(f"The current price of {ticker} is ${price}", reply_markup=reply_markup)
            else:
                await update.message.reply_text("Couldn't fetch the price. Please check the ticker symbol.")
        else:
            await update.message.reply_text("Invalid ticker symbol.")
    else:
        await update.message.reply_text("Please provide a ticker symbol. Usage: /price <ticker>")

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data.startswith('price_'):
        ticker = query.data.split('_')[1]
        price_info = cg.get_price(ids=ticker, vs_currencies='usd')
        if price_info:
            price = price_info.get(ticker, {}).get('usd')
            if price:
                keyboard = [[InlineKeyboardButton("Refresh", callback_data=f'price_{ticker}')]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(f"The current price of {ticker} is ${price}", reply_markup=reply_markup)
            else:
                await query.edit_message_text("Couldn't fetch the price. Please check the ticker symbol.")

async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in admins:
        await update.message.reply_text("You are not authorized to use this command.")
        return
    
    command = context.args[0] if context.args else ''
    if command == 'list':
        users = context.application.user_data.keys()
        await update.message.reply_text(f"Users: {', '.join(map(str, users))}")
    elif command == 'block':
        if len(context.args) > 1:
            user_id = int(context.args[1])
            blocked_users.add(user_id)
            await update.message.reply_text(f"User {user_id} has been blocked.")
        else:
            await update.message.reply_text("Please provide a user ID to block. Usage: /admin block <user_id>")
    elif command == 'unblock':
        if len(context.args) > 1:
            user_id = int(context.args[1])
            blocked_users.discard(user_id)
            await update.message.reply_text(f"User {user_id} has been unblocked.")
        else:
            await update.message.reply_text("Please provide a user ID to unblock. Usage: /admin unblock <user_id>")
    elif command == 'message':
        if len(context.args) > 2:
            user_id = int(context.args[1])
            message = ' '.join(context.args[2:])
            await context.bot.send_message(chat_id=user_id, text=message)
            await update.message.reply_text(f"Message sent to {user_id}.")
        else:
            await update.message.reply_text("Please provide a user ID and a message. Usage: /admin message <user_id> <message>")
    else:
        await update.message.reply_text("Invalid admin command. Available commands: list, block, unblock, message")

async def main():
    application = ApplicationBuilder().token("7708331542:AAEkSO_E9c6WRZnK0BxO49UXLWOonLD85pM").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("price", price))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(CommandHandler("admin", admin))

    await application.start()
    await application.updater.start_polling()
    await application.idle()

if __name__ == '__main__':
    asyncio.run(main())
